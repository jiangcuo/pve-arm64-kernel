From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thomas Lamprecht <t.lamprecht@proxmox.com>
Date: Tue, 7 Nov 2023 09:26:16 +0100
Subject: [PATCH] Revert "UBUNTU: SAUCE: ceph: make sure all the files
 successfully put before unmounting"

This reverts commit a53dba9297be9597eac7b17738723bd44bac97ea, which
was an early attempt to fix a bug that was actually present in the
ceph layer, as confirmed by the original patch author [0], and fixed
actually there now [1].

[0]: https://lore.kernel.org/all/8443166a-7182-7777-a489-14b5dab20bd5@redhat.com/
[1]: https://patchwork.kernel.org/project/ceph-devel/patch/20221221093031.132792-1-xiubli@redhat.com/
Hide

Signed-off-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
---
 fs/crypto/keyring.c | 6 +-----
 fs/inode.c          | 5 +----
 2 files changed, 2 insertions(+), 9 deletions(-)

diff --git a/fs/crypto/keyring.c b/fs/crypto/keyring.c
index 147b9a11c62c..7cbb1fd872ac 100644
--- a/fs/crypto/keyring.c
+++ b/fs/crypto/keyring.c
@@ -237,11 +237,7 @@ void fscrypt_destroy_keyring(struct super_block *sb)
 			 * with ->mk_secret.  There should be no structural refs
 			 * beyond the one associated with the active ref.
 			 */
-			if (refcount_read(&mk->mk_active_refs) != 1) {
-				printk("fscrypt_destroy_keyring: mk_active_refs = %d\n",
-				       refcount_read(&mk->mk_active_refs));
-				WARN_ON_ONCE(refcount_read(&mk->mk_active_refs) != 1);
-			}
+			WARN_ON_ONCE(refcount_read(&mk->mk_active_refs) != 1);
 			WARN_ON_ONCE(refcount_read(&mk->mk_struct_refs) != 1);
 			WARN_ON_ONCE(!is_master_key_secret_present(&mk->mk_secret));
 			wipe_master_key_secret(&mk->mk_secret);
diff --git a/fs/inode.c b/fs/inode.c
index 3b8abad427b4..67611a360031 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -716,11 +716,8 @@ void evict_inodes(struct super_block *sb)
 again:
 	spin_lock(&sb->s_inode_list_lock);
 	list_for_each_entry_safe(inode, next, &sb->s_inodes, i_sb_list) {
-		if (atomic_read(&inode->i_count)) {
-			printk("evict_inodes inode %p, i_count = %d, was skipped!\n",
-			       inode, atomic_read(&inode->i_count));
+		if (atomic_read(&inode->i_count))
 			continue;
-		}
 
 		spin_lock(&inode->i_lock);
 		if (inode->i_state & (I_NEW | I_FREEING | I_WILL_FREE)) {
